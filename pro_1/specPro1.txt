\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
\_                                                                    \_
\_   THE CITY COLLEGE OF NEW YORK, ELECTRICAL ENGINEERING DEPARTMENT  \_
\_                       EE259, DAY-EVENING SECTIONS                  \_
\_                                                                    \_
\_                              PROJECT 1                             \_
\_                                                                    \_
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
PROJECT 0 DESCRIPTION:
Write a C++ class definition called SIMPLER_GRADES, which inherits
from SIMPLEST_GRADES class, defined as follows:

  class SIMPLER_GRADES: public SIMPLEST_GRADES{
   public:      // public methods for this class

        SIMPLER_GRADES(int, int); // constructor;
		// example usage: g.SIMPLER_GRADES(x, y);
		// create an object called g with x students each with y grades;

	void SIMPLER_LIST(int); // a method;
		// example usage: g.SIMPLER_LIST(x);
		// list the grades for a given exam;
		// if x is -1, list the grades for all exams (use inheritance);
		// returns no values;

	void SIMPLER_FIND(int, int); // another method;
		// example usage: g.SIMPLER_LIST(x, y);
		// list the grade of student with id of x for exam y;
		// returns no values;
   };

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

An example of SIMPLER_GRADES constructor is as follows:

        SIMPLER_GRADES g(x, y);

which instantiates an object g of class SIMPLER_GRADES with x students
each with y exams.  Since SIMPLER_GRADES inherits from a base class
called SIMPLEST_GRADES, the constructor has to call the base class 
constructor as follows: 

	SIMPLER_GRADES(int x, int y)
		: SIMPLEST_GRADES(x, y) // call base class constructor;
	{
		// code for SIMPLER_GRADES constructor goes below:
		...
	}

The base class constructor reads the studentGrades.txt file and populates
the protected data elements. Therefore, in SIMPLER_GRADES constructor,
you do not have to read them again. Protected variables of SIMPLEST_GRADES
are accessible in SIMPLER_GRADES methods.

Expected output generated by constructor is:

	+ CONSTRUCTOR INSTANTIATED AN OBJECT WITH x STUDENTS, EACH WITH y EXAMS.
	*** SIMPLER_GRADES CONSTRUCTOR INSTANTIATED A NEW OBJECT.

Note the line starting with a single "+" is generated by the base class constructor.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Definition of SIMPLER_LIST method is as follows:

	g.SIMPLER_LIST(x);

where g is a object of class SIMPLER_GRADES and x is an integer.

This method lists the grades for exam x. The output to output.txt file is:

	*** START SIMPLER_LIST
	*** GRADES FOR EXAM x:
	id_0	ex_grade_00 
	...
	id_n-1	ex_grade_n-10 
	*** END SIMPLER_LIST

If x is -1, it lists the grades for all exams, using inheritance from
SIMPLEST_LIST method. In this case, the output to output.txt file is:

	*** START SIMPLER_LIST
	*** GRADES FOR ALL EXAMS:
	+ START SIMPLEST_LIST
	+ STUDENT IDS AND EXAM GRADES:
	id_0	ex_grade_00	...	ex_grade_0e-1
	...
	id_n-1	ex_grade_n-10	...	ex_grade_n-1e-1
	+ END SIMPLEST_LIST
	*** END SIMPLER_LIST

If x is illegal, the output to output.txt file is:

	*** START SIMPLER_LIST
	*** INPUT ERROR
	*** END SIMPLER_LIST

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

The definition of SIMPLER_FIND method is as follows:

        g.SIMPLER_FIND(x, y);

where g is a object of class SIMPLER_GRADES and x and y are integers.

This method prints the grade of student with id of x for exam y.

	*** START SIMPLER_FIND
	*** GRADE OF STUDENT WITH ID x FOR EXAM y: 
	x	ex_grade_y
	*** END SIMPLER_FIND

If there is no student with the given id, the output to output.txt is:

	*** START SIMPLER_FIND
	*** NO STUDENT WITH ID x
	*** ALL STUDENT IDS ARE:
	+ START SIMPLEST_LIST
	+ STUDENT IDS:
	id_0
	...
	id_n-1
	+ END SIMPLEST_LIST
	*** END SIMPLER_FIND

where the student ids are listed using SIMPLEST_LIST method in base class.

If x and/or y are illegal, the output to output.txt file is:

	*** START SIMPLER_FIND
	*** INPUT ERROR
	*** END SIMPLER_FIND

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
