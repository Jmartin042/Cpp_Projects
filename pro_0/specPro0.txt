\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
\_                                                                    \_
\_   THE CITY COLLEGE OF NEW YORK, ELECTRICAL ENGINEERING DEPARTMENT  \_
\_                       EE259, DAY-EVENING SECTIONS                  \_
\_                                                                    \_
\_                              PROJECT 0                             \_
\_                                                                    \_
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
PROJECT 0 DESCRIPTION:
Write a C++ class definition called SIMPLEST_GRADES defined as follows:
  class SIMPLEST_GRADES{
   public:      // public methods for this class
        SIMPLEST_GRADES(int, int); // constructor;
		// example usage: g.SIMPLEST_GRADES(x, y);
		// create an object called g with x students each with y exams;

	void SIMPLEST_LIST(int); // a method;
		// example usage: g.SIMPLEST_LIST(x);
		// if x is 1, list the student ids;
		// if x is 2, list the student ids and exam grades;
		// if x is -1, list the student ids in reverse order;
		// if x is -2, list the student ids and exam grades in reverse order;
                // returns no values;

	void SIMPLEST_AVE(int); // another method;
		// example usage: e.SIMPLEST_AVE(x);
		// find the average grade for exam x;
                // returns no values;

   protected:	// protected var to be used by this class and its derivative
   		// classes only (not from main)
        int n;  // no of students;
        int e;  // no of exams;
	int id[20]; // an integer array to hold the ids;
        int exam_grades[20][3]; // 2-dim array to hold exam grades; 
   };
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

An example of SIMPLEST_GRADES constructor usage is as follows:

	SIMPLEST_GRADES g(x, y);

which instantiates an object g of class SIMPLEST_GRADES with x students
each with y exams.  The constructor should populate the protected elements
by the values provided in studentGrades.txt file with the following format: 

	id_1 ex_grade_11 ... ex_grade_1e
	...
	id_1 ex_grade_n1 ... ex_grade_ne

where n (1<= n <= 20) is the number of students, each id_i (0 < id_i < 9999) 
is the id of ith student and ex_grade_ij the exam grades of the ith student 
(0<= grade_exj_i <= 100).  An output is generated into output.txt file as:

	+ CONSTRUCTOR INSTANTIATED AN OBJECT WITH x STUDENTS, EACH WITH y EXAMS.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Definition of SIMPLEST_LIST method is as follows:

	g.SIMPLEST_LIST(x);
	
where g is a SIMPLEST_GRADES object and x is an integer.  If x is 1, this 
method lists the student ids into output.txt file as follows:

	+ START SIMPLEST_LIST
	+ STUDENT IDS:
	id_0
	...
	id_n-1
	+ END SIMPLEST_LIST

If x is 2, it lists the student ids and grades into output.txt file as follows:

	+ START SIMPLEST_LIST
	+ STUDENT IDS AND EXAM GRADES:
	id_0	exam_00 ...	exam_0e-1
	...
	id_n-1	exam_n-10 ...	exam_n-1e-1
	+ END SIMPLEST_LIST

If x is -1, it lists the ids into output.txt file in reverse order:

	+ START SIMPLEST_LIST
	+ STUDENT IDS IN REVERSE ORDER:
	id_n-1
	...
	id_0
	+ END SIMPLEST_LIST

If x is -2, it lists the ids and grades in reverse order as follows:

	+ START SIMPLEST_LIST
	+ STUDENT IDS AND EXAM GRADES IN REVERSE ORDER:
	id_n-1	exam_n-10 ...	exam_n-1e-1
	...
	id_0	exam_00 ...	exam_0e-1
	+ END SIMPLEST_LIST

Any other value of x generates the following output into output.txt file:

	+ START SIMPLEST_LIST
	+ INPUT ERROR
	+ END SIMPLEST_LIST

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Definition of SIMPLEST_AVE method is as follows:

	g.SIMPLEST_AVE(x);

where g is a object of class SIMPLEST_GRADES and x is an integer for
an exam number (0 <= x < e).  This method should find the average for
exam x and print the following into output.txt:

	+ START SIMPLEST_AVE
	+ AVERAGE FOR n STUDENTS IN EXAM x IS y.
	+ END SIMPLEST_AVE

where y (float with 2 decimal points) is the average grade for these students.  
If x is not within the acceptable limits, the output to output.txt is:

	+ START SIMPLEST_AVE
	+ INPUT ERROR
	+ END SIMPLEST_AVE

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
