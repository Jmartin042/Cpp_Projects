\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
\_                                                                    \_
\_   THE CITY COLLEGE OF NEW YORK, ELECTRICAL ENGINEERING DEPARTMENT  \_
\_                       EE259, DAY-EVENING SECTIONS                  \_
\_                                                                    \_
\_                              PROJECT 2                             \_
\_                                                                    \_
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

PROJECT 2 DESCRIPTION:
Write a C++ class definition called SIMPLE_GRADES, which inherits
from SIMPLER_GRADES class (which in turn inherits from SIMPLEST_GRADES), 
defined as follows:

  class SIMPLE_GRADES: SIMPLER_GRADES{
   public:      // public methods for this class

        SIMPLE_GRADES(int, int); // constructor;
		// example usage: g.SIMPLE_GRADES(x, y);
		// create an object called g with x students each with y grades;

	void SIMPLE_SORT(int); // a method;
		// example usage: b.SIMPLE_SORT(x);
		// if x is 1, sort students in ascending order;
		// returns no values;

	void SIMPLE_MAX(int); // another method;
		// example usage: b.SIMPLE_MAX(x);
		// find student(s) received max grade for exam x;
		// returns no values;

	int SIMPLE_FIND(int, int);  //another method;
		// example usage: b.SIMPLE_FIND(x, y);
		// search student id x and pin y;
		// returns index for the found student;

	int SIMPLE_REPORT(int, int, int);  //another method;
		// example usage: b.SIMPLE_REPORT(x, y, z);
		// for student id x and pin y, report grade in exam z;
		// returns no values;
	protected:
		int pin[20]; // pin values for students;
   };
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

An example of SIMPLE_GRADES constructor usage is as follows:

        SIMPLE_GRADES g(x, y);

which instantiates an object g of class SIMPLE_GRADES with x students
each with y exams.  Since SIMPLE_GRADES inherits from a base class
called SIMPLER_GRADES, the constructor has to call the constructor of 
the base class as follows: 

	SIMPLE_GRADES(int x, int y)
		: SIMPLER_GRADES(x, y) // call base class constructor;
	{
		// code for SIMPLE_GRADES constructor goes below:
		// you have to read pin values from studentPins.txt file:
		...
	}

Derived class SIMPLE_GRADES inherits from two base classes called 
SIMPLER_GRADES and SIMPLEST_GRADES. During inheritance process, 
base class SIMPLEST_GRADES reads studentGrades.txt file and populates
the protected data elements.  The derived class of SIMPLE_GRADES 
should read the pin values given studentPins.txt file with the format:

	pin_0
	...
	pin_n-1

where pin_i (0 < pin_i < 100) corresponds to id_i in studentGrades.txt file.  
You should open  studentPins.txt file and assign the values to the protected 
elements in the constructor.

Expected output generated by constructor is:

	+ CONSTRUCTOR INSTANTIATED AN OBJECT WITH x STUDENTS, EACH WITH y EXAMS.
	*** SIMPLER_GRADES CONSTRUCTOR INSTANTIATED A NEW OBJECT.
	+++++ SIMPLE_GRADES CONSTRUCTOR CREATES A NEW OBJECT WITH PIN VALUES.

Note that the lines starting with a single "+" and "***" are generated by the base 
class constructors.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Definition of SIMPLE_SORT method is as follows:

        g.SIMPLE_SORT(x);

where g is a object of class SIMPLE_GRADES and x is an integer. 

If x is 1, this method sorts students in ascending order based on their ids
with the following output to output.txt file:

	+++++ START SIMPLE_SORT
	+++++ STUDENTS SORTED IN ASCENDING ORDER BASED ON IDS:
	*** START SIMPLER_LIST
	*** GRADES FOR ALL EXAMS:
	+ START SIMPLEST_LIST
	+ STUDENT IDS AND EXAM GRADES:
	id_0	ex_grade_00	...	ex_grade_0e-1
	...
	id_n-1	ex_grade_n-10	...	ex_grade_n-1e-1
	+ END SIMPLEST_LIST
	*** END SIMPLER_LIST
	+++++ END SIMPLE_SORT

where the lines starting with "+" and "***" are generated by the base classes.

If x is illegal, the output is:

	+++++ START SIMPLE_SORT
	+++++ INPUT ERROR
	+++++ END SIMPLE_SORT

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Definition of SIMPLE_MAX method is as follows:

        g.SIMPLE_MAX(x);

where g is a object of class SIMPLE_GRADES and integer x is the exam number.

This method finds the maximum grade among the students for exam x with the 
following output to output.txt file:

	+++++ START SIMPLE_MAX
	+++++ MAX GRADE FOR EXAM x IS y.
	+++++ END SIMPLE_MAX

where y is the maximum grade for exam x.

If x is illegal, the output is:

	+++++ START SIMPLE_MAX
	+++++ INPUT ERROR
	+++++ END SIMPLE_MAX

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Definition of SIMPLE_FIND method is as follows:

        g.SIMPLE_FIND(x, y);

where g is a SIMPLE_GRADES object and x and y are integers for student id 
and pin, respectively. 

If there is such a student, the output to output.txt file is:

	+++++ START SIMPLE_FIND
	+++++ THERE IS A STUDENT WITH ID x. 
	+++++ END SIMPLE_FIND

In this case, the method returns the index for the student.

If there is no such student with the given id and pin, the output is:

	+++++ START SIMPLE_FIND
	+++++ NO STUDENT WITH ID x.
	+++++ END SIMPLE_FIND

In this case, the method returns -1.

If x and/or y are illegal, the output to output.txt is:

	+++++ START SIMPLE_FIND
	+++++ INPUT ERROR
	+++++ END SIMPLE_FIND

In this case, the method returns -2.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Definition of SIMPLE_REPORT method is as follows:

        g.SIMPLE_REPORT(x, y, z);

where g is a SIMPLE_GRADES object and x, y and z are integers 
for student id, pin and exam number, respectively. 

If there is such a student, the output to output.txt file is:

	+++++ START SIMPLE_REPORT
	+++++ GRADE OF STUDENT x FOR EXAM z IS grade_z.
	+++++ END SIMPLE_REPORT

and it returns the index of this student.

If there is no such student, the output to output.txt is:

	+++++ START SIMPLE_REPORT
	+++++ NO STUDENT WITH ID y.
	+++++ ALL STUDENT IDS ARE:
	+ START SIMPLEST_LIST
	+ STUDENT IDS:
	id_0
	...
	id_n-1
	+ END SIMPLEST_LIST
	+++++ END SIMPLE_REPORT

where the student ids are listed using SIMPLEST_LIST method in base class.
In this case, it returns -1.

If x, y, and z are illegal, the output to output.txt is:

	+++++ START SIMPLE_REPORT
	+++++ INPUT ERROR
	+++++ END SIMPLE_REPORT

In this case, it returns -2.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
