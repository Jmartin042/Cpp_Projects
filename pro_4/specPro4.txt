\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
\_                                                                    \_
\_   THE CITY COLLEGE OF NEW YORK, ELECTRICAL ENGINEERING DEPARTMENT  \_
\_                       EE259, DAY-EVENING SECTIONS                  \_
\_                                                                    \_
\_                              PROJECT 4                             \_
\_                                                                    \_
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

PROJECT 4 DESCRIPTION:
Write a C++ class definition called OVERLOADED_GRADES, which inherits from 
GRADES class (which in turn inherits from SIMPLE_GRADES, SIMPLER_GRADES and
SIMPLEST_GRADES), defined as follows:

  class OVERLOADED_GRADES: public GRADES{
   public:      // public methods for this class

        OVERLOADED_GRADES(char *, int, int); // constructor;
		// example usage: g.OVERLOADED_GRADES("G1", x, y);
		// create an object g with x students each with y grades;

	void OVERLOADED_LIST(int); // a method;
		// example usage: b.OVERLOADED_LIST(x);
		// returns no values;

	int operator == (int);  
		// an overloaded operator;
		// example usage: if (g == 4)
		// returns integer;

	int operator == (OVERLOADED_GRADES);  
		// another overloaded operator;
		// example usage: if (g1 == g2)
		// returns integer;

        void operator -= (int); 
		// another overloaded operator;
		// example usage: g -= 1234;
		// returns nothing;

        void operator = (OVERLOADED_GRADES); 
		// another overloaded operator;
		// example usage: g1 = g2;
		// returns nothing;

        OVERLOADED_GRADES operator + (OVERLOADED_GRADES); 
		// another overloaded operator;
		// example usage: g1+g2;
		// returns OVERLOADED_GRADES object;
   private:
	char objName[15]; // name for the object; max length 14;
   };
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

An example of OVERLOADED_GRADES constructor usage is as follows:

        OVERLOADED_GRADES g(O_N, x, y);

which instantiates an object g of class OVERLOADED_GRADES with x students
each with y exams.  Character string O_N copied to objName (no input errors). 
Since OVERLOADED_GRADES inherits from a base class of GRADES, the constructor 
has to call the constructor of the base class: 

	OVERLOADED_GRADES(char * O_N, int x, int y)
		: GRADES(x, y) // call base class constructor;
	{
		// code for OVERLOADED_GRADES constructor goes below:
		...
	}

Derived class OVERLOADED_GRADES inherits from the base class GRADES,
which inherits from SIMPLE_GRADES, SIMPLER_GRADES and SIMPLEST_GRADES. 
During inheritance process, base classes read files and populate 
the protected data elements.  

Expected output generated by constructor is:

  + CONSTRUCTOR INSTANTIATED AN OBJECT WITH x STUDENTS, EACH WITH y EXAMS.
  *** SIMPLER_GRADES CONSTRUCTOR INSTANTIATED A NEW OBJECT.
  +++++ SIMPLE_GRADES CONSTRUCTOR CREATES A NEW OBJECT WITH PIN VALUES.
  ******* GRADES CONSTRUCTOR CREATES A NEW OBJECT WITH NAMES OF x STUDENTS. 
  +++++++++ OVERLOADED_GRADES OBJECT IS CREATED WITH x STUDENTS EACH WITH y EXAMS. 

Note that the lines starting with "+", "***", "*******" and "+++++" are generated 
by the base class constructors.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Definition of OVERLOADED_LIST method is as follows:

	g.OVERLOADED_LIST(x);

where g is a object of class OVERLOADED_GRADES and x is an integer.

If x is 0, it only lists first and last names with the following format:

  	+++++++++ START OVERLOADED_LIST
  	+++++++++ ELEMENTS OF objName:
	******* START LIST
	first_0	last_0 id_0 
	...
	first_n-1 last_n-1 id_n-1
	******* END LIST
  	+++++++++ END OVERLOADED_LIST

If x is 1, it lists the names ids, and grades with the following format:

  	+++++++++ START OVERLOADED_LIST
  	+++++++++ ELEMENTS OF objName:
	******* START LIST 
	first_0	last_0 id_0 ex_grade_00 ... ex_grade_0e-1
	...
	first_n-1 last_n-1 id_n-1 ex_grade_n-10 ... ex_grade_n-1e-1
	******* END LIST
  	+++++++++ END OVERLOADED_LIST

If x is 2, it lists the grades for all exams, using inheritance from
SIMPLEST_LIST method. In this case, the output to output.txt file is:

  	+++++++++ START OVERLOADED_LIST
  	+++++++++ ELEMENTS OF objName:
	******* START LIST
	+ START SIMPLEST_LIST
	+ STUDENT IDS AND EXAM GRADES:
	id_0	ex_grade_00	...	ex_grade_0e-1
	...
	id_n-1	ex_grade_n-10	...	ex_grade_n-1e-1
	+ END SIMPLEST_LIST
	******* END LIST
  	+++++++++ END OVERLOADED_LIST

If x is illegal, the output to output.txt file is:

  	+++++++++ START OVERLOADED_LIST
  	+++++++++ INPUT ERROR
  	+++++++++ END OVERLOADED_LIST

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Example use of overloaded operator == is as follows:

        if (g == x)

where g is an OVERLOADED_GRADES object and x is an integer. 

This overloaded operator checks if the number of students in g is 
equal to x. If so, it returns 1 with the following output:

  	+++++++++ START OVERLOADED OPERATOR ==
  	+++++++++ RETURNING TRUE FOR ObjName
  	+++++++++ END OVERLOADED OPERATOR ==

Otherwise, it returns 0 with the following output:

  	+++++++++ START OVERLOADED OPERATOR ==
  	+++++++++ RETURNING FALSE FOR ObjName
  	+++++++++ END OVERLOADED OPERATOR ==

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Example use of overloaded operator == is as follows:

        if (g1 == g2)

where g1 and g2 are OVERLOADED_GRADES objects.  

This overloaded operator checks if the number of students in g1 and
g2 are equal. If so, it returns 1 with the following output:

  	+++++++++ START OVERLOADED OPERATOR ==
  	+++++++++ RETURNING TRUE FOR ObjName1 AND ObjName2
  	+++++++++ END OVERLOADED OPERATOR ==

where ObjName1 and objName2 are the objName variables in g1 and g2,
respectively.  Otherwise, it returns 0 with the following output:

  	+++++++++ START OVERLOADED OPERATOR ==
  	+++++++++ RETURNING FALSE FOR ObjName1 AND ObjName2
  	+++++++++ END OVERLOADED OPERATOR ==

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Example use of overloaded operator -= is as follows:

        g -= x;

where g is an OVERLOADED_GRADES object and x is an integer.  

This method checks if there is a student with id of x by using 
SIMPLER_FIND defined in SIMPLER_GRADES (use exam 0 grade).
If so, this student is removed from g and n is decremented by 1. 
The output to output.txt is:

  	+++++++++ START OVERLOADED OPERATOR -=
	*** START SIMPLER_FIND
	*** GRADE OF STUDENT WITH ID x FOR EXAM 0: 
	x	ex_grade_0
	*** END SIMPLER_FIND
	+++++++++ STUDENT WITH ID x IS REMOVED FROM objName
	+++++++++ NOW THERE ARE m STUDENTS
  	+++++++++ END OVERLOADED OPERATOR -=

where m is n-1 after the student is removed.

If there is no such student, the output to output.txt is:

  	+++++++++ START OVERLOADED OPERATOR -=
	*** START SIMPLER_FIND
	*** NO STUDENT WITH ID x
	*** ALL STUDENT IDS ARE:
	+ START SIMPLEST_LIST
	+ STUDENT IDS:
	id_0
	...
	id_n-1
	+ END SIMPLEST_LIST
	*** END SIMPLER_FIND
	+++++++++ NO STUDENT WITH ID x IN objName
  	+++++++++ END OVERLOADED OPERATOR -=

If x is illegal, the output to output.txt file is:

  	+++++++++ START OVERLOADED OPERATOR -=
  	+++++++++ INPUT ERROR
  	+++++++++ END OVERLOADED OPERATOR -=

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Example use of overloaded operator = is as follows:

        g1 = g2;

where g1 and g2 are OVERLOADED_GRADES objects.

This method copies the elements of object g2 to g1. All the previous 
values of protected elements in g1 is overwritten, whereas g2 remains 
unchanged.  The output to output.txt is:

  	+++++++++ START OVERLOADED OPERATOR =
	+++++++++ ELEMENTS IN objName2 ARE ASSIGNED TO objName1
  	+++++++++ END OVERLOADED OPERATOR =

where ObjName1 and objName2 are the objName variables in g1 and g2,
respectively.  

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Example use of overloaded operator + is as follows:

        g1 + g2;

where g1 and g2 are OVERLOADED_GRADES objects.  

First, this method creates a temporary object of class OVERLOADED_GRADES 
(assign "tempObj" as the name of the object with zero students and exams).
Then it copies the elements from g1 and then from g2 into this 
temporary object. Finally, it returns this temporary object.  Note that 
g1 and g2 remain unchanged.  The output to output.txt is:

  	+++++++++ START OVERLOADED OPERATOR +
	+++++++++ n1 ELEMENTS IN objName1 ARE ADDED TO tempObj
	+++++++++ n2 ELEMENTS IN objName2 ARE ADDED TO tempObj
	+++++++++ RETURNING tempObj WITH m STUDENTS
  	+++++++++ END OVERLOADED OPERATOR +

where n1 and n2 are the number of students in g1 and g2, respectively,
and m is the the number of students in g1 added to that of g2.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
