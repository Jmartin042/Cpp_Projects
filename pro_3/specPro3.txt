\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
\_                                                                    \_
\_   THE CITY COLLEGE OF NEW YORK, ELECTRICAL ENGINEERING DEPARTMENT  \_
\_                       EE259, DAY-EVENING SECTIONS                  \_
\_                                                                    \_
\_                              PROJECT 3                             \_
\_                                                                    \_
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

PROJECT 2 DESCRIPTION:
Write a C++ class definition called SIMPLE_GRADES, which inherits
from SIMPLER_GRADES class (which in turn inherits from SIMPLEST_GRADES), 
defined as follows:

  class GRADES: public SIMPLE_GRADES{
   public:      // public methods for this class

        GRADES(int, int); // constructor;
		// example usage: g.GRADES(x, y);
		// create an object called g with x students each with y grades;

	void LIST(int); // a method;
		// example usage: b.LIST(x);
		// returns no values;

	void ALPHABETIZE(int); // a method;
		// example usage: b.ALPHABETIZE(x);
		// returns no values;

	int VERIFY(char *, char *); // another method;
		// example usage: b.VERIFY("KATE", "OGGEN");
		// returns integer;

	void REPORT(int, int, int, int);  //another method;
		// example usage: b.REPORT(w, x, y, z);
		// returns no values;

	protected:
		char firstNames[20][15]; // first names for students;
		char lastNames[20][15]; // last names for students;
   };
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

An example of GRADES constructor usage is as follows:

        GRADES g(x, y);

which instantiates an object g of class GRADES with x students
each with y exams.  Since GRADES inherits from a base class
called SIMPLE_GRADES, the constructor has to call the constructor of 
the base class as follows: 

	GRADES(int x, int y)
		: SIMPLE_GRADES(x, y) // call base class constructor;
	{
		// code for GRADES constructor goes below:
		// you have to read pin values from studentPins.txt file:
		...
	}

Derived class GRADES inherits from the base class called SIMPLE_GRADES,
which inherits from SIMPLER_GRADES and SIMPLEST_GRADES. During 
inheritance process, base class SIMPLEST_GRADES reads studentGrades.txt 
file and populates the protected data elements.  The derived class of 
SIMPLE_GRADES reads the pin values given in studentPins.txt file.
GRADES class reads the first and last names of the students given in
studentNames.txt file with the format:

	first_0		last_0
	...
	first_n-1	last_n-1
	pin_n-1

where ith entry corresponds to id_i in studentGrades.txt file.  
Note that the maximum length for a first or last name is 14 characters.
You should open  studentPins.txt file and assign the values to the 
protected elements in the constructor.

Expected output generated by constructor is:

	+ CONSTRUCTOR INSTANTIATED AN OBJECT WITH x STUDENTS, EACH WITH y EXAMS.
	*** SIMPLER_GRADES CONSTRUCTOR INSTANTIATED A NEW OBJECT.
	+++++ SIMPLE_GRADES CONSTRUCTOR CREATES A NEW OBJECT WITH PIN VALUES.
	******* GRADES CONSTRUCTOR CREATES A NEW OBJECT WITH NAMES OF x STUDENTS. 

Note that the lines starting with "+", "***", and "+++++" are generated by the base 
class constructors.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Definition of LIST method is as follows:

	g.LIST(x);

where g is a object of class GRADES and x is an integer.

If x is 0, it only lists first and last names with the following format:

	******* START LIST
	first_0	last_0 id_0 
	...
	first_n-1 last_n-1 id_n-1
	******* END LIST

If x is 5, it lists only the names with the following format:

	******* START LIST
	first_0	last_0 id_0 ex_grade_00 ... ex_grade_0e-1
	...
	first_n-1 last_n-1 id_n-1 ex_grade_n-10 ... ex_grade_n-1e-1
	******* END LIST

If x is -5, it lists the grades for all exams, using inheritance from
SIMPLEST_LIST method. In this case, the output to output.txt file is:

	******* START LIST
	+ START SIMPLEST_LIST
	+ STUDENT IDS AND EXAM GRADES:
	id_0	ex_grade_00	...	ex_grade_0e-1
	...
	id_n-1	ex_grade_n-10	...	ex_grade_n-1e-1
	+ END SIMPLEST_LIST
	******* END LIST

If x is illegal, the output to output.txt file is:

	******* START LIST
	******* INPUT ERROR
	******* END LIST

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Definition of ALPHABETIZE method is as follows:

        g.ALPHABETIZE(x);

where g is a object of class GRADES and x is an integer. 

If x is 1, this method sorts students in alphabetical order based on
their last names with the following output to output.txt file:

	******* START ALPHABETIZE
	******* STUDENTS SORTED IN ALPHABETICAL ORDER BASED ON LAST NAMES:
	******* START LIST
	first_0	last_0 id_0 ex_grade_00 ... ex_grade_0e-1
	...
	first_n-1 last_n-1 id_n-1 ex_grade_n-10 ... ex_grade_n-1e-1
	******* END LIST
	******* END ALPHABETIZE

If x is illegal, the output is:

	******* START ALPHABETIZE
	******* INPUT ERROR
	******* END ALPHABETIZE

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Definition of VERIFY method is as follows:

        g.VERIFY(FN, LN);

where g is a GRADES object and FN and LN are character strings for a 
first and last name of a student, respectively. 

If there is such a student, the output to output.txt file is:

	******* START VERIFY
	******* THERE IS A STUDENT AS FN LN.
	******* END VERIFY

In this case, the method returns the index for the student.

If there is no such student, the output is:

	******* START VERIFY
	******* NO STUDENT AS FN LN.
	******* END VERIFY

In this case, the method returns -1.

If FN and/or LN are illegal, the output to output.txt is:

	******* START VERIFY
	******* INPUT ERROR
	******* END VERIFY

In this case, the method returns -2.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

Definition of REPORT method is as follows:

        g.REPORT(w, x, y, z);

where g is a GRADES object and w, x, y, and z are integers. 

If w is 1, using inheritance from SIMPLE_REPORT, check if 
there is such a student.  If so, the output to output.txt file is:

	******* START REPORT
	+++++ START SIMPLE_REPORT
	+++++ GRADE OF STUDENT x FOR EXAM z IS grade_z.
	+++++ END SIMPLE_REPORT
	******* END REPORT

where the lines starting with "+++++" are from SIMPLE_REPORT.

If there is no such student, the output to output.txt is:

	******* START REPORT
	+++++ START SIMPLE_REPORT
	+++++ NO STUDENT WITH ID y.
	+++++ ALL STUDENT IDS ARE:
	+ START SIMPLEST_LIST
	+ STUDENT IDS:
	id_0
	...
	id_n-1
	+ END SIMPLEST_LIST
	+++++ END SIMPLE_REPORT
	******* END REPORT

where the student ids are listed using SIMPLEST_LIST method in base class.

If w, x, y, and z are all set to 0, the report is generated as follows:

	******* START REPORT
	12345678901234567890123456789012345678901234567890
	**********first_name_0*last_name_0****************
	...
	**********first_name_n-1*last_name_n-1************
	******* END REPORT

where there are no spaces, and each line is 50 characters long.
(The line with numbers are shown only to indicate the length.)
For example, the names in studentNames.txt file were given as:

	KATE	OGGEN
	ASILEM	RAYU
	NILAY	KENT
	MONALISA SCHONBRUN

The expected output will be:

	******* START REPORT
	***********KATE*OGGEN*****************************
	***********ASILEM*RAYU****************************
	***********NILAY*KENT*****************************
	***********MONALISA*SCHONBRUN*********************
	******* END REPORT

If w, x, y, and/or z are illegal, the output to output.txt is:

	******* START REPORT
	******* INPUT ERROR
	******* END REPORT

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
