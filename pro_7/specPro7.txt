\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
\_                                                                      \_
\_   THE CITY COLLEGE OF NEW YORK, ELECTRICAL ENGINEERING DEPARTMENT    \_
\_                         EE259 PROGRAMMING FOR EE                     \_
\_                                                                      \_
\_                              PROJECT 7                               \_
\_                                                                      \_
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

PROJECT 7 DESCRIPTION:

Write a C++ class called EZ_CURVE_FIT to perform the least squares curve 
fitting technique over a given set of data.  You will inherit from LINEAR_SOLVER
class located in /mnt/ee259dir/tools/pro_6/sample_p6.h file. 

class EZ_CURVE_FIT:public LINEAR_SOLVER
{
   public:
	EZ_CURVE_FIT(int); // constructor; 
		// example: s.EZ_CURVE_FIT(5);
		// there are 5 pairs of data points;

	void LS_FIT_BY_ME(char *); // example: s.LS_FIT_BY_ME("in.txt");
		// perform least squares fit using inheritance;
		// input data is in in.txt file;
		
	void LS_FIT_BY_MATLAB(char *); // example: s.LS_FIT_BY_MATLAB("in.txt");
		// perform least squares fit using MATLAB; 
		// input data is in in.txt file;
   private:
	int np; // number of data pairs, assume np less than 100
};

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

To inherit from LINEAR_SOLVER class, your constructor should look like:

EZ_CURVE_FIT::EZ_CURVE_FIT(int x)
	:LINEAR_SOLVER(2) // initialize base class LINEAR_SOLVER;
{
        // your code goes here: 
        
}

Constructor generastes the following output to output_7.txt files:

The output to output_7.txt file is:

	++++++++ P7 BEGIN ++++++
	++++++++ P7 INSTANTIATED AN OBJECT WITH x DATA POINTS
	++++++++ P7 END ++++++

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

The definition of LS_FIT_BY_ME method is as follows:

	s.LS_FIT_BY_ME("inputDataFile.txt");

The format of the data file is as follows:
 
X_0 Y_0
X_1 Y_1
...
X_n-1 Y_n-1

where X_i, Y_i are floating point numbers for the data points.

In order to find a linear function ( y = mx + b) to fit the data, you need
to solve a linear equation set.  In this method, first you need to compute 
s1, through s6 values. Then you will put them into a file called S_values.txt
which will be used by sample_p6.h.

The format of S_values.txt file should be:
	
	S1 S2
	S4 S5
	S3
	S6

To find the values of m and b, you should use SOLVE_LINEAR_EQUATION
inherited from LINEAR_SOLVER and solve this equation set. 

By inheriting from LINEAR_SOLVER, use SOLVE_LINEAR_EQUATION as follows:

	LINEAR_SOLVER L("S_values.txt",2);
	L.SOLVE_LINEAR_EQUATION("UNSORTED");
	
The results for X[0], X[1] of the linear equation are given in output.txt file,
where, X[0] corresponds to m and X[1] to b.

At this point you should output the following into the output_7.txt file:

	LEAST_SQUARE_FIT RESULT:
	USING INHERITANCE:
	MATCHING FUNCTION IS Y = m * X + b

where m and b have 2 digits after the decimal.

Now you proceed with calculating the error, which will be written into
output7.txt file as follows:

	THE ERROR FROM LS_FIT_BY_ME METHOD IS e

where e should have 3 digits after the decimal.

Remember to remove output.txt after each a.out run.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

The definition of LS_FIT_BY_MATLAB method is as follows:

	s.LS_FIT_BY_MATLAB("data_file_name"); 

To find a linear function ( y = mx + b) for the approximation and the 
error, you will use MATLAB set by populating mat_1.m file as follows:

   x=[x0,...,xn-1];
   y=[y0,...,yn-1];
   coef=polyfit(x,y,1);
   m=coef(1);
   b=coef(2);
   Y=m*x+b;
   matlab_error=sum((y - Y).^2);
   fid=fopen('output_7.txt','a');
   fprintf(fid,'*** RESULT FROM MATLAB\n');
   fprintf(fid,'*** THE MATCHING FUNCTION IS Y=(%.3f) * X +(%.3f) \n',m,b);
   fprintf(fid,'*** THE ERROR FROM MATLAB IS %.3f \n', matlab_error);

Before writing into mat_1.m file, read the values of x_0 through x_n-1 
and y_0 through y_n-1 from the file name provided in the method call.
Then generate mat_1.m file as specified above and execute it file 
from within your LS_FIT_BY_MATLAB method by the following command:

        system("/bin/csh /mnt/ee259dir/tools/pro_7/run_mat_1");

which will run your mat_1.m file in MATLAB.  The output generated by
MATLAB will be appended to output_7.txt file.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
